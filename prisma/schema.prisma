generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  Pending
  Active
  Paused
  Archived
}

model Project {
  id          String         @id
  name        String
  description String?
  imageUrl    String?
  metaURI     String
  owner       String
  status      ProjectStatus  @default(Pending)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  bondingCurve BondingCurve?

  // --- NEW RELATIONS ---
  verifications Verification[]
  impactCredits ImpactCredit[]
}

model BondingCurve {
  id                 String   @id // The bonding curve contract address
  projectId          String   @unique // Foreign key to Project
  project            Project  @relation(fields: [projectId], references: [id])
  creator            String
  collateralToken    String
  initialPrice       String
  priceMultiplier    String
  projectToken       String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// --- NEW MODELS ---

// Represents a verification request submitted to the dMRVManager.
model Verification {
  id           String   @id // The verificationId from the event
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id])
  verifier     String   // The address of the verifier module used
  submittedAt  DateTime @default(now())
  status       String   // e.g., Submitted, Succeeded, Failed
  outcomeData  Bytes?   // The data returned from the VerificationOutcome event

  // Relation to the credits minted from this verification
  impactCredits ImpactCredit[]
}

// Represents a batch of Dynamic Impact Credits minted for a project.
model ImpactCredit {
  id             String       @id @default(cuid()) // Unique ID for the record
  projectId      String
  project        Project      @relation(fields: [projectId], references: [id])
  verificationId String
  verification   Verification @relation(fields: [verificationId], references: [id])
  amount         String       // The amount of credits minted (as a string to handle large numbers)
  mintedAt       DateTime     @default(now())
  txHash         String       // The transaction hash of the mint
}
